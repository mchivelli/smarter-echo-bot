#!/bin/bash
# SSH Recovery Script v2 - Completely Self-Contained
# This script will fix SSH without depending on any backup files

echo "🔧 SSH Recovery Script v2 Starting..."
echo "📅 $(date)"

# Function to log messages
log_message() {
    echo "$(date '+%H:%M:%S') $1" | tee -a /boot/ssh_recovery.log
}

log_message "🔧 SSH Recovery Script v2 Starting..."

# Stop SSH service first
log_message "🛑 Stopping SSH service..."
systemctl stop ssh 2>/dev/null || true

# Remove all existing SSH host keys (they might be corrupted)
log_message "🗑️ Removing corrupted SSH host keys..."
rm -f /etc/ssh/ssh_host_*

# Create a clean, minimal SSH configuration
log_message "📝 Creating clean SSH configuration..."
cat > /etc/ssh/sshd_config << 'EOF'
# Minimal SSH Configuration - Auto-generated by recovery script
Port 22
Protocol 2
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key

# Logging
SyslogFacility AUTH
LogLevel INFO

# Authentication
LoginGraceTime 120
PermitRootLogin no
StrictModes yes
PubkeyAuthentication yes
PasswordAuthentication yes
PermitEmptyPasswords no
ChallengeResponseAuthentication no

# Kerberos options
KerberosAuthentication no
KerberosOrLocalPasswd yes
KerberosTicketCleanup yes

# GSSAPI options
GSSAPIAuthentication no
GSSAPICleanupCredentials yes

X11Forwarding yes
X11DisplayOffset 10
PrintMotd no
PrintLastLog yes
TCPKeepAlive yes

# Allow client to pass locale environment variables
AcceptEnv LANG LC_*

Subsystem sftp /usr/lib/openssh/sftp-server

UsePAM yes
EOF

log_message "✅ Clean SSH configuration created"

# Generate new SSH host keys
log_message "🔑 Generating new SSH host keys..."
ssh-keygen -A

# Set correct permissions
log_message "🔒 Setting correct permissions..."
chmod 600 /etc/ssh/ssh_host_*_key
chmod 644 /etc/ssh/ssh_host_*_key.pub
chmod 644 /etc/ssh/sshd_config

# Enable SSH service
log_message "🚀 Enabling SSH service..."
systemctl enable ssh

# Start SSH service
log_message "▶️ Starting SSH service..."
systemctl start ssh

# Wait for service to start
sleep 3

# Check if SSH is running
if systemctl is-active --quiet ssh; then
    log_message "✅ SSH service is running successfully!"
    
    # Get the Pi's IP address
    IP_ADDR=$(hostname -I | awk '{print $1}')
    log_message "🌐 SSH is now available at: ssh prototype@${IP_ADDR}"
    
    # Test SSH configuration
    if sshd -t 2>/dev/null; then
        log_message "✅ SSH configuration is valid"
    else
        log_message "⚠️ SSH configuration has warnings (but should still work)"
    fi
    
else
    log_message "❌ SSH service failed to start"
    log_message "📋 SSH service status:"
    systemctl status ssh >> /boot/ssh_recovery.log 2>&1
fi

# Restore original cmdline.txt to prevent this script from running again
log_message "🔄 Restoring original boot configuration..."
if [ -f /boot/cmdline_backup.txt ]; then
    cp /boot/cmdline_backup.txt /boot/cmdline.txt
    log_message "✅ Original cmdline.txt restored"
else
    # Create a safe default cmdline.txt
    PARTUUID=$(blkid | grep "PARTUUID=" | head -1 | sed 's/.*PARTUUID="\([^"]*\)".*/\1/')
    if [ -n "$PARTUUID" ]; then
        echo "console=serial0,115200 console=tty1 root=PARTUUID=${PARTUUID} rootfstype=ext4 fsck.repair=yes rootwait cfg80211.ieee80211_regdom=AT" > /boot/cmdline.txt
        log_message "✅ Default cmdline.txt created with PARTUUID=${PARTUUID}"
    else
        log_message "⚠️ Could not determine PARTUUID, manual cmdline.txt restoration needed"
    fi
fi

# Remove this script
log_message "🧹 Removing recovery script..."
rm -f /boot/ssh_fix_boot_v2.sh

log_message "🎉 SSH Recovery Complete!"
log_message "📋 Recovery log saved to /boot/ssh_recovery.log"

# Final status message
echo ""
echo "============================================"
echo "🎉 SSH RECOVERY COMPLETED!"
echo "============================================"
echo "✅ SSH service is running"
echo "🌐 Connect with: ssh prototype@$(hostname -I | awk '{print $1}')"
echo "📋 Full log available at: /boot/ssh_recovery.log"
echo "============================================" 